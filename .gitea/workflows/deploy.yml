name: Deploy to starter.gmac.io

on:
  push:
    branches: [ main ]
  pull_request:
    types: [ opened, synchronize ]

env:
  REGISTRY: ci.gmac.io
  # Docker image names must be lowercase
  IMAGE_NAME: mackieg/clerk-stripe-starter

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Gitea Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ gitea.actor }}
        password: ${{ secrets.GITEATOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        build-args: |
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${{ secrets.NEXTPUBLICCLERKPUBLISHABLEKEY }}
          NEXT_PUBLIC_APP_URL=https://starter.gmac.io
          NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=${{ secrets.NEXTPUBLICSTRIPEPUBLISHABLEKEY }}
          CLERK_SECRET_KEY=${{ secrets.CLERKSECRETKEY }}
          STRIPE_SECRET_KEY=${{ secrets.STRIPESECRETKEY }}
          TURSO_DATABASE_URL=${{ secrets.TURSODATABASEURL }}
          TURSO_AUTH_TOKEN=${{ secrets.TURSOAUTHTOKEN }}
          NEXT_PUBLIC_STRIPE_PRICE_ID_STARTER_MONTHLY=${{ secrets.NEXTPUBLICSTRIPEPRICEIDSTARTERMONTHLY }}
          NEXT_PUBLIC_STRIPE_PRICE_ID_STARTER_YEARLY=${{ secrets.NEXTPUBLICSTRIPEPRICEIDSTARTERYEARLY }}
          NEXT_PUBLIC_STRIPE_PRICE_ID_PRO_MONTHLY=${{ secrets.NEXTPUBLICSTRIPEPRICEIDPROMONTHLY }}
          NEXT_PUBLIC_STRIPE_PRICE_ID_PRO_YEARLY=${{ secrets.NEXTPUBLICSTRIPEPRICEIDPROYEARLY }}
          NEXT_PUBLIC_STRIPE_PRICE_ID_ENTERPRISE_MONTHLY=${{ secrets.NEXTPUBLICSTRIPEPRICEIDENTERPRISEMONTHLY }}
          NEXT_PUBLIC_STRIPE_PRICE_ID_ENTERPRISE_YEARLY=${{ secrets.NEXTPUBLICSTRIPEPRICEIDENTERPRISEYEARLY }}
        cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
        cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        kubectl version --client

    - name: Deploy to K3s
      if: github.ref == 'refs/heads/main'
      env:
        KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG }}
      run: |
        # Setup kubeconfig
        echo "$KUBECONFIG_CONTENT" | base64 -d > /tmp/kubeconfig
        export KUBECONFIG=/tmp/kubeconfig
        
        # Create namespace if it doesn't exist
        kubectl create namespace production --dry-run=client -o yaml | kubectl apply -f -
        
        # Create image pull secret for Gitea registry
        kubectl create secret docker-registry gitea-registry \
          --docker-server=${{ env.REGISTRY }} \
          --docker-username=${{ gitea.actor }} \
          --docker-password=${{ secrets.GITEATOKEN }} \
          --namespace=production \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Create secret for environment variables
        kubectl create secret generic clerk-stripe-starter-env \
          --from-literal=CLERK_SECRET_KEY="${{ secrets.CLERKSECRETKEY }}" \
          --from-literal=CLERK_WEBHOOK_SECRET="${{ secrets.CLERKWEBHOOKSECRET }}" \
          --from-literal=STRIPE_SECRET_KEY="${{ secrets.STRIPESECRETKEY }}" \
          --from-literal=STRIPE_WEBHOOK_SECRET="${{ secrets.STRIPEWEBHOOKSECRET }}" \
          --from-literal=TURSO_DATABASE_URL="${{ secrets.TURSODATABASEURL }}" \
          --from-literal=TURSO_AUTH_TOKEN="${{ secrets.TURSOAUTHTOKEN }}" \
          --from-literal=NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY="${{ secrets.NEXTPUBLICCLERKPUBLISHABLEKEY }}" \
          --from-literal=NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY="${{ secrets.NEXTPUBLICSTRIPEPUBLISHABLEKEY }}" \
          --from-literal=NEXT_PUBLIC_APP_URL="https://starter.gmac.io" \
          --from-literal=NEXT_PUBLIC_STRIPE_PRICE_ID_STARTER_MONTHLY="${{ secrets.STRIPEPRICEIDSTARTERMONTHLY }}" \
          --from-literal=NEXT_PUBLIC_STRIPE_PRICE_ID_STARTER_YEARLY="${{ secrets.STRIPEPRICEIDSTARTERYEARLY }}" \
          --from-literal=NEXT_PUBLIC_STRIPE_PRICE_ID_PRO_MONTHLY="${{ secrets.STRIPEPRICEIDPROMONTHLY }}" \
          --from-literal=NEXT_PUBLIC_STRIPE_PRICE_ID_PRO_YEARLY="${{ secrets.STRIPEPRICEIDPROYEARLY }}" \
          --from-literal=NEXT_PUBLIC_STRIPE_PRICE_ID_ENTERPRISE_MONTHLY="${{ secrets.STRIPEPRICEIDENTERPRISEMONTHLY }}" \
          --from-literal=NEXT_PUBLIC_STRIPE_PRICE_ID_ENTERPRISE_YEARLY="${{ secrets.STRIPEPRICEIDENTERPRISEYEARLY }}" \
          --from-literal=STRIPE_PRICE_ID_STARTER_MONTHLY="${{ secrets.STRIPEPRICEIDSTARTERMONTHLY }}" \
          --from-literal=STRIPE_PRICE_ID_STARTER_YEARLY="${{ secrets.STRIPEPRICEIDSTARTERYEARLY }}" \
          --from-literal=STRIPE_PRICE_ID_PRO_MONTHLY="${{ secrets.STRIPEPRICEIDPROMONTHLY }}" \
          --from-literal=STRIPE_PRICE_ID_PRO_YEARLY="${{ secrets.STRIPEPRICEIDPROYEARLY }}" \
          --from-literal=STRIPE_PRICE_ID_ENTERPRISE_MONTHLY="${{ secrets.STRIPEPRICEIDENTERPRISEMONTHLY }}" \
          --from-literal=STRIPE_PRICE_ID_ENTERPRISE_YEARLY="${{ secrets.STRIPEPRICEIDENTERPRISEYEARLY }}" \
          --from-literal=UPSTASH_REDIS_REST_URL="${{ secrets.UPSTASHREDISRESTURL }}" \
          --from-literal=UPSTASH_REDIS_REST_TOKEN="${{ secrets.UPSTASHREDISRESTTOKEN }}" \
          --namespace=production \
          --dry-run=client -o yaml | kubectl apply -f -
        
        # Create deployment manifest
        cat <<EOF > deployment.yaml
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: clerk-stripe-starter
          namespace: production
          labels:
            app: clerk-stripe-starter
            environment: production
        spec:
          replicas: 2
          selector:
            matchLabels:
              app: clerk-stripe-starter
          template:
            metadata:
              labels:
                app: clerk-stripe-starter
            spec:
              containers:
              - name: app
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
                ports:
                - containerPort: 3000
                envFrom:
                - secretRef:
                    name: clerk-stripe-starter-env
                env:
                - name: NODE_ENV
                  value: production
                - name: PORT
                  value: "3000"
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "200m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
              imagePullSecrets:
              - name: gitea-registry
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: clerk-stripe-starter
          namespace: production
        spec:
          selector:
            app: clerk-stripe-starter
          ports:
          - port: 80
            targetPort: 3000
        ---
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: clerk-stripe-starter
          namespace: production
          annotations:
            cert-manager.io/cluster-issuer: "letsencrypt-prod"
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
        spec:
          ingressClassName: nginx
          tls:
          - hosts:
            - starter.gmac.io
            secretName: clerk-stripe-starter-tls
          rules:
          - host: starter.gmac.io
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: clerk-stripe-starter
                    port:
                      number: 80
        EOF
        
        # Apply deployment
        kubectl apply -f deployment.yaml
        
        # Wait for deployment
        kubectl rollout status deployment/clerk-stripe-starter \
          -n production \
          --timeout=300s
        
        echo "âœ… Deployed to https://starter.gmac.io"